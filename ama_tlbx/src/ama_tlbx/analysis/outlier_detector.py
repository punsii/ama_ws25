"""Base class and implementations for outlier detection strategies."""
# TODO: This file was generated by Copliot. Review, understand, and edit it!
# TODO: Add IsolationForrest based outlier detector!

from abc import ABC, abstractmethod

import numpy as np
import pandas as pd


class OutlierDetector(ABC):
    """Abstract base class for outlier detection strategies."""

    @abstractmethod
    def detect(self, data: pd.DataFrame, columns: list[str] | None = None) -> pd.DataFrame | pd.Series:
        """Detect outliers in the given data.

        Args:
            data: DataFrame to analyze for outliers
            columns: Columns to check (None = all numeric columns)

        Returns:
            DataFrame or Series with boolean values (True = outlier)
        """


class IQROutlierDetector(OutlierDetector):
    """Detect outliers using the Interquartile Range (IQR) method.

    The IQR method identifies outliers as values that fall below Q1 - threshold*IQR
    or above Q3 + threshold*IQR, where IQR = Q3 - Q1.

    Attributes:
        threshold: IQR multiplier (1.5 = standard, 3.0 = extreme outliers)
        exclude_cols: Columns to exclude from analysis
    """

    def __init__(self, threshold: float = 1.5, exclude_cols: list[str] | None = None):
        """Initialize IQR outlier detector.

        Args:
            threshold: IQR multiplier for outlier boundaries
            exclude_cols: Columns to exclude from analysis
        """
        self.threshold = threshold
        self.exclude_cols = exclude_cols or ["country"]

    def detect(self, data: pd.DataFrame, columns: list[str] | None = None) -> pd.DataFrame:
        """Detect outliers using IQR method.

        Args:
            data: DataFrame to analyze
            columns: Columns to check (None = all numeric columns)

        Returns:
            DataFrame with boolean values indicating outliers per feature
        """
        if columns is None:
            columns = [col for col in data.select_dtypes(include=[np.number]).columns if col not in self.exclude_cols]

        outliers = pd.DataFrame(False, index=data.index, columns=columns)

        for col in columns:
            q1 = data[col].quantile(0.25)
            q3 = data[col].quantile(0.75)
            iqr = q3 - q1
            lower_bound = q1 - self.threshold * iqr
            upper_bound = q3 + self.threshold * iqr
            outliers[col] = (data[col] < lower_bound) | (data[col] > upper_bound)

        return outliers


class ZScoreOutlierDetector(OutlierDetector):
    """Detect outliers using Z-score method.

    The Z-score method identifies outliers as values with standardized scores
    (z-scores) that exceed the specified threshold.

    Attributes:
        threshold: Z-score threshold (3.0 = 99.7% of data, 2.5 = 98.8%)
        exclude_cols: Columns to exclude from analysis
    """

    def __init__(self, threshold: float = 3.0, exclude_cols: list[str] | None = None):
        """Initialize Z-score outlier detector.

        Args:
            threshold: Z-score threshold for outlier detection
            exclude_cols: Columns to exclude from analysis
        """
        self.threshold = threshold
        self.exclude_cols = exclude_cols or ["country"]

    def detect(self, data: pd.DataFrame, columns: list[str] | None = None) -> pd.DataFrame:
        """Detect outliers using Z-score method.

        Args:
            data: DataFrame to analyze
            columns: Columns to check (None = all numeric columns)

        Returns:
            DataFrame with boolean values indicating outliers per feature
        """
        if columns is None:
            columns = [col for col in data.select_dtypes(include=[np.number]).columns if col not in self.exclude_cols]

        outliers = pd.DataFrame(False, index=data.index, columns=columns)

        for col in columns:
            mean = data[col].mean()
            std = data[col].std()
            z_scores = np.abs((data[col] - mean) / std)
            outliers[col] = z_scores > self.threshold

        return outliers
