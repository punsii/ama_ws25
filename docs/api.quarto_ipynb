{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"API Reference\"\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "> This reference is generated automatically with [`pdoc`](https://pdoc.dev).\n"
      ],
      "id": "bfe81ee9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import pdoc.doc\n",
        "import importlib\n",
        "import pkgutil\n",
        "\n",
        "# Import the main module\n",
        "ama_module = importlib.import_module(\"ama_tlbx\")\n",
        "\n",
        "# Get all submodules\n",
        "submodule_names = [\n",
        "    \"ama_tlbx.data\",\n",
        "    \"ama_tlbx.analysis\", \n",
        "    \"ama_tlbx.plotting\"\n",
        "]\n",
        "\n",
        "print(\"## Package Overview\\n\")\n",
        "print(\"The `ama_tlbx` package provides tools for applied multivariate analysis, including:\")\n",
        "print(\"- Data handling and preprocessing\")\n",
        "print(\"- Statistical analysis (correlation, PCA)\")\n",
        "print(\"- Visualization utilities\")\n",
        "print(\"\\n\")\n",
        "\n",
        "# Document each submodule\n",
        "for submod_name in submodule_names:\n",
        "    try:\n",
        "        submod_module = importlib.import_module(submod_name)\n",
        "        submod = pdoc.doc.Module(submod_module)\n",
        "        \n",
        "        print(f\"## `{submod.name}`\\n\")\n",
        "        \n",
        "        if submod.docstring:\n",
        "            print(submod.docstring)\n",
        "            print(\"\\n\")\n",
        "        \n",
        "        # List classes\n",
        "        if submod.classes:\n",
        "            print(\"### Classes\\n\")\n",
        "            for cls_name in sorted(submod.classes.keys()):\n",
        "                cls = submod.classes[cls_name]\n",
        "                print(f\"#### `{cls.qualname}`\\n\")\n",
        "                if cls.docstring:\n",
        "                    # Get first paragraph or first 500 chars\n",
        "                    doc = cls.docstring.split('\\n\\n')[0]\n",
        "                    if len(doc) > 500:\n",
        "                        doc = doc[:500] + \"...\"\n",
        "                    print(doc)\n",
        "                    print(\"\\n\")\n",
        "                \n",
        "                # Show methods\n",
        "                if cls.functions:\n",
        "                    print(\"**Methods:**\\n\")\n",
        "                    for method_name in sorted(cls.functions.keys()):\n",
        "                        if not method_name.startswith('_'):  # Skip private methods\n",
        "                            method = cls.functions[method_name]\n",
        "                            sig = str(method.signature) if method.signature else \"()\"\n",
        "                            print(f\"- `{method_name}{sig}`\")\n",
        "                            if method.docstring:\n",
        "                                first_line = method.docstring.split('\\n')[0].strip()\n",
        "                                if first_line:\n",
        "                                    print(f\"  - {first_line}\")\n",
        "                    print()\n",
        "        \n",
        "        # List functions\n",
        "        if submod.functions:\n",
        "            print(\"### Functions\\n\")\n",
        "            for func_name in sorted(submod.functions.keys()):\n",
        "                if not func_name.startswith('_'):  # Skip private functions\n",
        "                    func = submod.functions[func_name]\n",
        "                    sig = str(func.signature) if func.signature else \"()\"\n",
        "                    print(f\"#### `{func_name}{sig}`\\n\")\n",
        "                    if func.docstring:\n",
        "                        doc = func.docstring.split('\\n\\n')[0]\n",
        "                        if len(doc) > 300:\n",
        "                            doc = doc[:300] + \"...\"\n",
        "                        print(doc)\n",
        "                        print(\"\\n\")\n",
        "        \n",
        "        print(\"---\\n\")\n",
        "        \n",
        "    except Exception as e:\n",
        "        print(f\"*Could not load {submod_name}: {e}*\\n\")\n",
        "\n",
        "print(\"\\n## Full Documentation\\n\")\n",
        "print(\"For complete interactive API documentation with search and navigation, run:\\n\")\n",
        "print(\"```bash\")\n",
        "print(\"pdoc ama_tlbx\")\n",
        "print(\"```\")"
      ],
      "id": "a1602a0a",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/jd/Desktop/repos/ama_ws25/ama_tlbx/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
